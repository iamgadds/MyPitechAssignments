--FUNCTIONS
--1.	TAKE PRODUCTNAME AS PARAMETER AND RETURN UNITPRICE

ALTER FUNCTION GETUNITPRICE(@PRODUCTNAME VARCHAR(20))
RETURNS INT
AS
BEGIN
	DECLARE @UNITPRICE INT
	SELECT @UNITPRICE = UNITPRICE FROM Products WHERE ProductName = @PRODUCTNAME
	RETURN @UNITPRICE
END

SELECT DBO.GETUNITPRICE('CHAI')
SELECT * FROM Products

--2.	TAKE PRODUCTNAME AS PARAMETER AND RETURN UNITSINSTOCK AND UNINTSONORDER

CREATE FUNCTION GETUNITS(@PRODUCTNAME VARCHAR(20)) 
RETURNS TABLE AS 
RETURN (SELECT UnitsInStock, UnitsOnOrder FROM Products WHERE ProductName = @PRODUCTNAME )
GO

SELECT * FROM DBO.GETUNITS('CHAI')

--3.	TAKE POSTALCODE AS PARAMETER AND RETURN CUSTOMER NAME. IF POSTAL CODE IS NOT VALID DISPLAY ERROR MESSAGE

SP_HELP CUSTOMERS
CREATE FUNCTION GETCUSTOMERNAME(@POSTALCODE VARCHAR(20))
RETURNS INT
BEGIN
	IF LEN(@POSTALCODE) < 6
	BEGIN
		RETURN 'INVALID POSTAL CODE'
	END
	ELSE
	BEGIN
		DECLARE @CUSTOMERNAME VARCHAR(20)
		SELECT @CUSTOMERNAME = ContactName FROM CUSTOMERS WHERE POSTALCODE = @POSTALCODE
		RETURN @CUSTOMERNAME
	END
	RETURN @CUSTOMERNAME
END
SELECT DBO.GETCUSTOMERNAME(40003) 
--4.	TAKE COUNTRY AS PARAMETER AND RETURN CITY AND POSTALCODE FOR A CUSTOMERS

CREATE FUNCTION GETCITY_POSTALCODE(@COUNTRY VARCHAR(20)) 
RETURNS TABLE AS
RETURN (SELECT City, PostalCode FROM Customers WHERE Country = @COUNTRY)
GO
SELECT * FROM DBO.GETCITY_POSTALCODE('GERMANY')
--5.	TAKE EMPLOYEE FIRSTNAME AND LASTNAME AS PARAMETER AND RETURN ALL CUSTOMERS COMPANY NAME,  CONTACTNAME, CONTACTTILE

CREATE FUNCTION GETDATAFROMNAME(@FIRSTNAME VARCHAR(20), @LASTNAME VARCHAR(20))
RETURNS TABLE AS
RETURN (SELECT CompanyName, ContactName, ContactTitle FROM Customers WHERE ContactName = @FIRSTNAME +' '+@LASTNAME)
GO
SELECT * FROM Customers
SELECT * FROM DBO.GETDATAFROMNAME('MARIA', 'ANDERS')
--6.	TAKE YEAR AND EMPLOYEENAME AND DISPLAY AMOUNT OF ORDERS HANDLE  BY THE EMPLOYEE IN A YEAR  (SUM OF QUANTITY)

ALTER FUNCTION GETTOTALORDERS(@YEAR INT, @EMPLOYEENAME VARCHAR(20))
RETURNS INT
BEGIN
DECLARE @SUM INT
	SELECT @SUM = SUM(QUANTITY) FROM [Order Details] WHERE OrderID IN
	( SELECT OrderID FROM Orders WHERE YEAR(OrderDate) = @YEAR AND 
	EmployeeID IN (SELECT EmployeeID FROM Employees WHERE CONCAT(FIRSTNAME, ' ', LASTNAME) = @EMPLOYEENAME))
	RETURN @SUM
END
SELECT DBO.GETTOTALORDERS(1996, 'ANDREW FULLER')
SELECT * FROM Employees
SELECT * FROM Orders
--7.	TAKE YEAR AND MONTH AS PARAMETER AND RETURN NO OF ORDERS SHIPPED IN THE GIVEN MONTH

CREATE FUNCTION GETSHIP(@YEAR INT, @MONTH INT)
RETURNS INT
BEGIN
	DECLARE @ORDERCOUNT INT
	SELECT @ORDERCOUNT = COUNT(ORDERID) FROM Orders WHERE YEAR(ShippedDate)= @YEAR AND MONTH(SHIPPEDDATE) = @MONTH
	RETURN @ORDERCOUNT
END
SELECT DBO.GETSHIP(1996, 8)
--8.	TAKE PRODUCTNAME AS PARAMTER AND RETURN TOTLA UNITS OF ORDER PLACED FOR THE PRODUCT (SUM(ORDERED QUANTITY)
--Hint: use Products and [Order Details] table
CREATE FUNCTION GETPRODUCT(@PRODUCTNAME VARCHAR(20))
RETURNS INT
BEGIN
	DECLARE @SUM INT
	SELECT @SUM = SUM(QUANTITY) FROM [Order Details] WHERE ProductID IN (SELECT ProductID FROM Products WHERE ProductName = @PRODUCTNAME)
	RETURN @SUM
END
SELECT * FROM Products
SELECT DBO.GETPRODUCT('CHAI')
--9.       TAKE ORDERID AS PARAMETER AND RETURN TOTAL UNITS OF ORDER PLACE FOR THE ORDERID
CREATE FUNCTION GETQTY(@ORDERID INT)
RETURNS INT
BEGIN
	DECLARE @QTY INT
	SELECT @QTY = QUANTITY FROM [Order Details] WHERE OrderID = @ORDERID
	RETURN @QTY
END

